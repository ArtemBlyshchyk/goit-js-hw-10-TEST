{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\n\nconst inputText = document.getElementById('datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst timerDays = document.querySelector('[data-days]');\nconst timerHours = document.querySelector('[data-hours]');\nconst timerMinutes = document.querySelector('[data-minutes]');\nconst timerSeconds = document.querySelector('[data-seconds]');\n\nlet userSelectedDate;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate < new Date()) {\n      //   window.alert('Please choose a date in the future');\n      iziToast.warning({\n        message: 'Please choose a date in the future',\n        messageColor: 'red',\n        messageSize: 25,\n        timeout: 2000,\n        position: 'center',\n      });\n\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\n\nconst fp = flatpickr(inputText, options);\n\nfunction startTimer() {\n  let restTime = userSelectedDate.getTime() - new Date().getTime();\n\n  const timerInterval = setInterval(updateTimer, 1000);\n\n  function updateTimer() {\n    restTime -= 1000; // Subtract 1 second\n\n    if (restTime <= 0) {\n      clearInterval(timerInterval);\n      restTime = 0;\n    }\n\n    const { days, hours, minutes, seconds } = convertMs(restTime);\n\n    timerDays.textContent = addLeadingZero(days);\n    timerHours.textContent = addLeadingZero(hours);\n    timerMinutes.textContent = addLeadingZero(minutes);\n    timerSeconds.textContent = addLeadingZero(seconds);\n  }\n}\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, '0');\n}\n\nstartButton.addEventListener('click', startTimer);\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["inputText","startButton","timerDays","timerHours","timerMinutes","timerSeconds","userSelectedDate","options","selectedDates","iziToast","flatpickr","startTimer","restTime","timerInterval","updateTimer","days","hours","minutes","seconds","convertMs","addLeadingZero","value","ms"],"mappings":"6vBAKA,MAAMA,EAAY,SAAS,eAAe,iBAAiB,EACrDC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5D,IAAIC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAmBE,EAAc,GAC7BF,EAAmB,IAAI,MAEzBG,EAAS,QAAQ,CACf,QAAS,qCACT,aAAc,MACd,YAAa,GACb,QAAS,IACT,SAAU,QAClB,CAAO,EAEDR,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EAEWS,EAAUV,EAAWO,CAAO,EAEvC,SAASI,GAAa,CACpB,IAAIC,EAAWN,EAAiB,QAAO,EAAK,IAAI,KAAI,EAAG,UAEvD,MAAMO,EAAgB,YAAYC,EAAa,GAAI,EAEnD,SAASA,GAAc,CACrBF,GAAY,IAERA,GAAY,IACd,cAAcC,CAAa,EAC3BD,EAAW,GAGb,KAAM,CAAE,KAAAG,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUP,CAAQ,EAE5DV,EAAU,YAAckB,EAAeL,CAAI,EAC3CZ,EAAW,YAAciB,EAAeJ,CAAK,EAC7CZ,EAAa,YAAcgB,EAAeH,CAAO,EACjDZ,EAAa,YAAce,EAAeF,CAAO,CAClD,CACH,CAEA,SAASE,EAAeC,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC,CAEApB,EAAY,iBAAiB,QAASU,CAAU,EAEhD,SAASQ,EAAUG,EAAI,CAMrB,MAAMP,EAAO,KAAK,MAAMO,EAAK,KAAG,EAC1BN,EAAQ,KAAK,MAAOM,EAAK,MAAO,IAAI,EACpCL,EAAU,KAAK,MAAQK,EAAK,MAAO,KAAQ,GAAM,EACjDJ,EAAU,KAAK,MAASI,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAP,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}